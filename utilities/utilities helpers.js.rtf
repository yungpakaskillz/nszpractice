{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Format a date string into a human-readable format.\
 * @param \{string\} dateString - ISO date string.\
 * @returns \{string\} - Formatted date.\
 */\
export function formatDate(dateString) \{\
  const date = new Date(dateString);\
  return date.toLocaleDateString();\
\}\
\
/**\
 * Truncate a string to a specified length, appending ellipsis if needed.\
 * @param \{string\} text - The text to truncate.\
 * @param \{number\} maxLength - Maximum length allowed.\
 * @returns \{string\} - The truncated text.\
 */\
export function truncateText(text, maxLength = 100) \{\
  if (text.length <= maxLength) return text;\
  return text.substring(0, maxLength) + '...';\
\}\
\
/**\
 * Debounce function to delay execution until after a wait period.\
 * @param \{Function\} fn - Function to debounce.\
 * @param \{number\} delay - Delay in milliseconds.\
 * @returns \{Function\} - Debounced function.\
 */\
export function debounce(fn, delay) \{\
  let timer;\
  return function (...args) \{\
    if (timer) clearTimeout(timer);\
    timer = setTimeout(() => \{\
      fn(...args);\
    \}, delay);\
  \};\
\}\
\
/**\
 * Convert a date string into a relative time (e.g., "2 hours ago").\
 * @param \{string\} dateString - ISO date string.\
 * @returns \{string\} - Relative time string.\
 */\
export function relativeTime(dateString) \{\
  const date = new Date(dateString);\
  const now = new Date();\
  const diff = now - date; // difference in milliseconds\
  const seconds = Math.floor(diff / 1000);\
  const minutes = Math.floor(diff / 60000);\
  const hours = Math.floor(diff / 3600000);\
  const days = Math.floor(diff / 86400000);\
\
  if (days > 0) return `$\{days\} day$\{days > 1 ? 's' : ''\} ago`;\
  if (hours > 0) return `$\{hours\} hour$\{hours > 1 ? 's' : ''\} ago`;\
  if (minutes > 0) return `$\{minutes\} minute$\{minutes > 1 ? 's' : ''\} ago`;\
  return `$\{seconds\} second$\{seconds > 1 ? 's' : ''\} ago`;\
\}\
}